{"version":3,"file":"static/js/153.557d3bbd.chunk.js","mappings":"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","sources":["webpack://Reenbit-Trainee-Camp/./src/components/AuthForms/LoginForm/loginForm.module.css?cab6","components/AuthForms/LoginForm/LoginForm.jsx","components/Schemas/schemas.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"loginForm_form__IzHGQ\",\"form__title\":\"loginForm_form__title__YI5z1\",\"form__wrapper\":\"loginForm_form__wrapper__DYEos\",\"form__input\":\"loginForm_form__input__yvGy2\",\"form__input-error\":\"loginForm_form__input-error__yMU8-\",\"form__icon-check\":\"loginForm_form__icon-check__DyPt+\",\"form__icon-show\":\"loginForm_form__icon-show__1F2tc\",\"form__btn\":\"loginForm_form__btn__jHSZ2\",\"form_text\":\"loginForm_form_text__8BQtk\"};","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useFormik, Formik, Form, Field } from \"formik\";\r\nimport { ImEye, ImEyeBlocked } from \"react-icons/im\";\r\nimport { FaCheck, FaTimes } from \"react-icons/fa\";\r\nimport schemas from \"../../Schemas/schemas\";\r\nimport { logIn } from \"../../../redux/auth/operations\";\r\nimport css from \"./loginForm.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst LoginForm = () => {\r\n  const [isShown, setIsShown] = useState(true); //\r\n  const [showPass, setShowPass] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const hideForm = () => {\r\n    setIsShown(true);\r\n  };\r\n\r\n  const onSubmit = (values) => {\r\n    setIsLoading(true);\r\n    const { email, password } = values;\r\n    dispatch(\r\n      logIn({\r\n        email,\r\n        password,\r\n      }),\r\n      hideForm(),\r\n      setIsLoading(false)\r\n    );\r\n  };\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    validationSchema: schemas.schemasLogin,\r\n    onSubmit,\r\n  });\r\n\r\n  const isValid =\r\n    (formik.errors.email && formik.touched.email) ||\r\n    (formik.errors.password && formik.touched.password) ||\r\n    formik.values.email === \"\"\r\n      ? true\r\n      : false;\r\n\r\n  const showPassword = () => {\r\n    setShowPass(!showPass);\r\n  };\r\n\r\n  const showAccentValidateInput = (hasValue, isValide) => {\r\n    return !hasValue ? null : isValide ? \"#E2001A\" : \"#3CBC81\";\r\n  };\r\n  return (\r\n    <>\r\n      <Formik validationSchema={schemas.schemasLogin}>\r\n        <Form\r\n          className={css.form}\r\n          name=\"form-contacts\"\r\n          onSubmit={formik.handleSubmit}\r\n          autoComplete=\"off\"\r\n        >\r\n          <h1 className={css.form__title}>{\"Login\"}</h1>\r\n          {isShown && (\r\n            <div className={css.form__wrapper}>\r\n              <Field\r\n                className={css.form__input}\r\n                style={{\r\n                  borderColor: showAccentValidateInput(\r\n                    formik.values.email,\r\n                    formik.errors.email\r\n                  ),\r\n                }}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                validate={schemas.schemasLogin.email}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.email}\r\n                onBlur={formik.handleBlur}\r\n              />\r\n              {!formik.values.email ? null : !formik.errors.email ? (\r\n                <FaCheck\r\n                  className={css[\"form__icon-check\"]}\r\n                  color={\"#3CBC81\"}\r\n                />\r\n              ) : (\r\n                <FaTimes\r\n                  className={css[\"form__icon-check\"]}\r\n                  color={\"#E2001A\"}\r\n                />\r\n              )}\r\n              {formik.errors.email || formik.touched.email ? (\r\n                <div className={css[\"form__input-error\"]}>\r\n                  {formik.errors.email}\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          )}\r\n\r\n          {isShown && (\r\n            <div className={css.form__wrapper}>\r\n              <Field\r\n                className={css.form__input}\r\n                style={{\r\n                  borderColor: showAccentValidateInput(\r\n                    formik.values.password,\r\n                    formik.errors.password\r\n                  ),\r\n                }}\r\n                name=\"password\"\r\n                type={showPass ? \"text\" : \"password\"}\r\n                placeholder=\"Password\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.password}\r\n                onBlur={formik.handleBlur}\r\n              />\r\n\r\n              <span className={css[\"form__icon-show\"]} onClick={showPassword}>\r\n                {!showPass ? <ImEyeBlocked /> : <ImEye />}\r\n              </span>\r\n              {formik.errors.password && formik.touched.password ? (\r\n                <div className={css[\"form__input-error\"]}>\r\n                  {formik.errors.password}\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          )}\r\n\r\n          {isShown && (\r\n            <button className={css.form__btn} type=\"submit\" disabled={isValid}>\r\n              {\"Login\"}\r\n            </button>\r\n          )}\r\n\r\n          {!isShown && (\r\n            <button className={css.form__btn} type=\"submit\">\r\n              {\"Login\"}\r\n            </button>\r\n          )}\r\n          <Link to={\"/signin\"}>\r\n            <div className={css.form_text}>\r\n              <span>\r\n                {\"Still don't have an account? \"}\r\n                <span className={css[\"form_text--bold\"]}>Register</span>\r\n              </span>\r\n            </div>\r\n          </Link>\r\n        </Form>\r\n      </Formik>\r\n      {isLoading && <h1 style={{ textAlign: \"center\" }}>{\"Loading...\"}</h1>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import * as Yup from \"yup\";\r\n\r\nconst registerSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .matches(/^\\s*\\S+\\s*$/, \"Email must be without spaces\")\r\n    .matches(/\\S{7,}/, \"Email too short (min 7 symbols)\")\r\n    .matches(\r\n      /^(?=.{7,63}$)([^а-яА-Я]+@([a-zA-Z]+\\.)+[a-zA-z]{2,3})$/g,\r\n      \"Invalid email\"\r\n    )\r\n    .matches(\r\n      /^[^-]+((.*[^-]))*@([a-zA-Z]+\\.)+[a-zA-z]{2,3}$/g,\r\n      \"Dashes should only be inside email\"\r\n    )\r\n    .required(\"Require field\"),\r\n  password: Yup.string()\r\n    .min(7, \"Password too short (min 7)\")\r\n    .max(32, \"Password too long (max 32)\")\r\n    .matches(/^\\s*\\S+\\s*$/, \"Password must be without spaces\")\r\n    .required(\"Require field\"),\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(\"password\")], \"Password must match\")\r\n    .required(\"Require field\"),\r\n  name: Yup.string()\r\n    .matches(/\\S{2,}/, \"Name too short (min 2)\")\r\n    .matches(\r\n      /((\\s*[a-zA-Z]+\\s*){2,}|[a-zA-Z]{2,})/,\r\n      \"Name must includes only Latin alphabet\"\r\n    )\r\n    .required(\"Require field\"),\r\n  phone: Yup.number()\r\n    .nullable(true)\r\n    .required(\"Require field\")\r\n    .min(99999)\r\n    .max(999999999999),\r\n  location: Yup.string()\r\n    .matches(\r\n      /(([A-Za-zsd&.-]){1,}, ([A-Za-zsd&,.-]){1,})/,\r\n      \"Invalid format. Example: Brovary, Kyiv ...\"\r\n    )\r\n    .required(\"Require field\"),\r\n});\r\n\r\nconst schemasLogin = Yup.object().shape({\r\n  email: Yup.string()\r\n    .matches(/^\\s*\\S+\\s*$/, \"Email must be without spaces\")\r\n    .matches(/\\S{7,}/, \"Email too short (min 7 symbols)\")\r\n    .matches(\r\n      /^(?=.{7,63}$)([^а-яА-Я]+@([a-zA-Z]+\\.)+[a-zA-z]{2,3})$/g,\r\n      \"Invalid email\"\r\n    )\r\n    .matches(\r\n      /^[^-]+((.*[^-]))*@([a-zA-Z]+\\.)+[a-zA-z]{2,3}$/g,\r\n      \"Dashes should only be inside email\"\r\n    )\r\n    .required(\"Require\"),\r\n  password: Yup.string()\r\n    .min(7, \"Password too short (min 7)\")\r\n    .max(32, \"Password too long (max 32)\")\r\n    .matches(/^\\s*\\S+\\s*$/, \"Password must be without spaces\")\r\n    .required(\"Require\"),\r\n});\r\n\r\nconst schemasChangePassword = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(7, \"Password too short (min 7)\")\r\n    .max(32, \"Password too long (max 32)\")\r\n    .matches(/^\\s*\\S+\\s*$/, \"Password must be without spaces\")\r\n    .required(\"Require\"),\r\n});\r\n\r\nconst schemas = {\r\n  registerSchema,\r\n  schemasLogin,\r\n  schemasChangePassword,\r\n};\r\n\r\nexport default schemas;"],"names":["LoginForm","isShown","setIsShown","useState","showPass","setShowPass","isLoading","setIsLoading","dispatch","useDispatch","formik","useFormik","initialValues","email","password","validationSchema","schemas","schemasLogin","onSubmit","values","logIn","isValid","errors","touched","showAccentValidateInput","hasValue","isValide","_jsxs","_Fragment","children","_jsx","Formik","Form","className","css","form","name","handleSubmit","autoComplete","form__title","form__wrapper","Field","form__input","style","borderColor","type","placeholder","validate","onChange","handleChange","value","onBlur","handleBlur","FaTimes","color","FaCheck","onClick","showPassword","ImEye","ImEyeBlocked","form__btn","disabled","Link","to","form_text","textAlign","registerSchema","Yup","shape","matches","required","min","max","confirmPassword","oneOf","phone","nullable","location","schemasChangePassword"],"sourceRoot":""}